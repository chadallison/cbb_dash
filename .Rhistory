# Remove "&" and extract lines containing "&" from sw, store in variable cj
cj = gsub("&", "", grep("&", sw, value = T))
# Split the lines after " -> " and remove "&" and "%" from sw, set names to sw
sw = setNames(strsplit(gsub(".* -> ", "", x), ", "), gsub("[&%]", "", sw))
# Create a list of names from cj and set initial values to 0
cj_list = setNames(lapply(cj, \(n) names(sw)[sapply(sw, \(x) any(x == n))]), cj)
cj_list = lapply(cj_list, \(x) setNames(rep.int(0L, length(x)), x))
# Set initial values to 0 for each element in ff
ff_state = setNames(rep(0L, length(ff)), ff)
# Initialize variables for further computation
snd = integer()
snd_from = character()
k = 1L
res = c(0L, 0L)
res2 = integer()
tar = names(cj_list[[names(which(sapply(sw, \(a) any(a == "rx"))))]])
rnd = 1L
# Main loop to iterate until length of res2 is equal to length of tar
while (length(res2) < length(tar)) {
snd = c(c("broadcaster" = 0L))
snd_from = c("button")
k = 1L
# Nested loop to iterate over elements in snd
while (k <= length(snd)) {
cur = snd[k]
new = sw[[names(cur)]]
# Check if names(cur) is in ff
if (names(cur) %in% ff) {
if (cur == 0L) {
new_sig = 1L - ff_state[names(cur)]
ff_state[names(cur)] = new_sig
snd = c(snd, setNames(rep(new_sig, length(new)), new))
snd_from = c(snd_from, rep(names(cur), length(new)))
}
} else if (names(cur) %in% cj) {
# Update cj_list and check conditions
cj_list[[names(cur)]][snd_from[k]] = cur
new_sig = if (all(cj_list[[names(cur)]]) == 1L) 0L else 1L
snd = c(snd, setNames(rep(new_sig, length(new)), new))
snd_from = c(snd_from, rep(names(cur), length(new)))
# Check if names(cur) is in tar and new_sig is 1L
if (names(cur) %in% tar & new_sig == 1L) {
res2 = c(res2, setNames(rnd, names(cur)))
}
} else {
# Update snd and snd_from for other cases
snd = c(snd, setNames(rep.int(0L, length(new)), new))
snd_from = c(snd_from, rep("broadcaster", length(new)))
}
k = k + 1L
}
# Update res and increment rnd
res = res + table(snd)
if (rnd == 1000) part1 = prod(res)
rnd = rnd + 1L
}
# part 1
sprintf("part 1 solution: %s", part1)
# part 2
sprintf("part 2 solution: %.f", Reduce(pracma::Lcm, res2))
# Read data from 'data.txt' and create a dictionary G
data <- readLines('input.txt')
G <- sapply(seq_along(data), function(i) {
sapply(seq_along(data[[i]]), function(j) {
if (substring(data[[i]], j, j) %in% c('.', 'S')) {
return(i + (j - 1i))
} else {
return(NA)
}
})
})
G <- unlist(G)
G <- G[!is.na(G)]
# Initialize variables
done <- numeric()
todo <- G[G %in% 1i * seq_along(data) - 1 + 1i]
cmod <- function(x) {
return(Complex(Mod(x) %% 131, Arg(x)))
}
# Iterate over the range
for (s in seq(1, 3 * 131)) {
if (s == 64) {
cat(length(todo), '\n')
}
if (s %% 131 == 65) {
done <- c(done, length(todo))
}
todo <- unique(unlist(lapply(todo, function(p) {
d <- c(1, -1, 1i, -1i)
return(p + d[dmod(p + d, 131) %in% G])
})))
}
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(ncaahoopR)
library(caret)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
opening_day = as_date("2023-11-06")
today = Sys.Date()
season_dates = as.character(seq.Date(from = opening_day, to = today, by = 1))
# res = read_csv("data/end_games.csv", show_col_types = F)
res = data.frame()
for (date in season_dates) {
new = get_master_schedule(date)
res = rbind(res, new)
}
# write_csv(res, "data/end_games.csv")
end = res |>
filter(!is.na(home_score)) |>
mutate(win_team = ifelse(home_score > away_score, home, away),
lose_team = ifelse(home_score > away_score, away, home),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
all_teams = sort(unique(c(unique(end$win_team), unique(end$lose_team))))
team_records = data.frame(team = all_teams) |>
left_join(end |>
count(win_team) |>
setNames(c("team", "wins")), by = "team") |>
left_join(end |>
count(lose_team) |>
setNames(c("team", "losses")), by = "team") |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
games = wins + losses,
win_pct = round(wins / games, 3)) |>
arrange(desc(win_pct), desc(wins))
team_records |>
filter(games >= 8)
get_team_off_ppg = function(team) {
home = end |> filter(home == team) |> pull(home_score)
away = end |> filter(away == team) |> pull(away_score)
return(round(mean(c(home, away)), 3))
}
get_team_def_ppg = function(team) {
home = end |> filter(home == team) |> pull(away_score)
away = end |> filter(away == team) |> pull(home_score)
return(round(mean(c(home, away)), 3))
}
team_ppg = data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg),
diff = off_ppg - def_ppg)
eligible_teams = team_records |>
filter(games >= 3) |>
pull(team)
top3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_max(diff, n = 5, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
geom_abline(linetype = "dashed", alpha = 0.25) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top-five differential")
get_half_scores = function(game_id) {
data = get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score)
home = data$home[1]
away = data$away[1]
return(data |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
transmute(game_id = game_id, half, home_pts, away_pts) |>
pivot_wider(!game_id, names_from = half, values_from = c("home_pts", "away_pts")) |>
transmute(game_id, home, away, home_pts_1, home_pts_2, away_pts_1, away_pts_2))
}
uni_unc = 401580922
get_half_scores(uni_unc)
cpr_raw = end |>
left_join(team_ppg, by = c("away" = "team")) |>
rename(away_off_ppg = off_ppg, away_def_ppg = def_ppg) |>
select(-diff) |>
left_join(team_ppg, by = c("home" = "team")) |>
rename(home_off_ppg = off_ppg, home_def_ppg = def_ppg) |>
select(-diff) |>
mutate(home_exp = (home_off_ppg + away_def_ppg) / 2,
away_exp = (home_def_ppg + away_off_ppg) / 2,
home_off_cpr = home_score - home_exp,
home_def_cpr = away_exp - away_score,
away_off_cpr = away_score - away_exp,
away_def_cpr = home_exp - home_score)
get_off_cpr = function(team) {
home = cpr_raw |> filter(home == team) |> pull(home_off_cpr)
away = cpr_raw |> filter(away == team) |> pull(away_off_cpr)
return(round(mean(c(home, away)), 3))
}
get_def_cpr = function(team) {
home = cpr_raw |> filter(home == team) |> pull(home_def_cpr)
away = cpr_raw |> filter(away == team) |> pull(away_def_cpr)
return(round(mean(c(home, away)), 3))
}
team_cpr = data.frame(team = all_teams) |>
mutate(off_cpr = sapply(team, get_off_cpr),
def_cpr = sapply(team, get_def_cpr),
total_cpr = off_cpr + def_cpr)
# best overall teams
team_cpr |>
slice_max(total_cpr, n = 25, with_ties = F) |>
mutate(rank = rank(-total_cpr),
team = paste0(team, " (", rank, ")")) |>
ggplot(aes(reorder(team, total_cpr), total_cpr)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = total_cpr), size = 3, hjust = -0.25) +
coord_flip(ylim = c(0, max(team_cpr$total_cpr) * 1.05)) +
labs(x = NULL, y = "Total CPR", title = "Best Overall Teams (CPR)")
# best offensive teams
team_cpr |>
slice_max(off_cpr, n = 25, with_ties = F) |>
mutate(rank = rank(-off_cpr),
team = paste0(team, " (", rank, ")")) |>
ggplot(aes(reorder(team, off_cpr), off_cpr)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = off_cpr), size = 3, hjust = -0.25) +
coord_flip(ylim = c(0, max(team_cpr$off_cpr) * 1.05)) +
labs(x = NULL, y = "Offensive CPR", title = "Best Offensive Teams (CPR)")
# best defensive teams
team_cpr |>
slice_max(def_cpr, n = 25, with_ties = F) |>
mutate(rank = rank(-def_cpr),
team = paste0(team, " (", rank, ")")) |>
ggplot(aes(reorder(team, def_cpr), def_cpr)) +
geom_col(aes(fill = team), show.legend = F) +
geom_text(aes(label = def_cpr), size = 3, hjust = -0.25) +
coord_flip(ylim = c(0, max(team_cpr$def_cpr) * 1.05)) +
labs(x = NULL, y = "Defensive CPR", title = "Best Defensive Teams (CPR)")
sprintf("Correlation between offensive and total CPR: %s", round(cor(team_cpr$off_cpr, team_cpr$total_cpr), 3))
sprintf("Correlation between defensive and total CPR: %s", round(cor(team_cpr$def_cpr, team_cpr$total_cpr), 3))
off = lm(total_cpr ~ off_cpr, data = team_cpr)
def = lm(total_cpr ~ def_cpr, data = team_cpr)
print("-------------------------------------------------------------------")
sprintf("RMSE for model predicting total CPR with only offensive CPR: %s", round(sqrt(mean(off$residuals ^ 2)), 3))
sprintf("RMSE for model predicting total CPR with only defensive CPR: %s", round(sqrt(mean(def$residuals ^ 2)), 3))
ncaahoopR::ncaa_colors
score_counts = end |>
mutate(score = paste0(win_score, "-", lose_score)) |>
count(score) |>
rename(score_count = n)
end |>
mutate(score = paste0(win_score, "-", lose_score)) |>
left_join(score_counts, by = "score") |>
ggplot(aes(win_score, lose_score)) +
geom_point(shape = "square", col = "#89A483")
my_teams = c("North Carolina", "Tennessee")
team_cpr |>
mutate(off_rank = rank(-off_cpr, ties.method = "average"),
def_rank = rank(-def_cpr, ties.method = "average"),
ovr_rank = rank(-total_cpr, ties.method = "average")) |>
filter(team %in% my_teams)
# build a model predicting win team based on team CPR metrics and see which are most important
cpr_ppg = team_ppg |>
left_join(team_cpr, by = "team") |>
select(team, off_ppg, def_ppg, off_cpr, def_cpr)
winners_with_metrics = end |>
mutate(home_win = ifelse(win_team == home, 1, 0)) |>
left_join(cpr_ppg, by = c("home" = "team")) |>
rename(home_off_ppg = off_ppg,
home_def_ppg = def_ppg,
home_off_cpr = off_cpr,
home_def_cpr = def_cpr) |>
left_join(cpr_ppg, by = c("away" = "team")) |>
rename(away_off_ppg = off_ppg,
away_def_ppg = def_ppg,
away_off_cpr = off_cpr,
away_def_cpr = def_cpr) |>
select(home_win, home_off_ppg:away_def_cpr)
winners_with_metrics |> colnames()
set.seed(1251)
trainIndex = createDataPartition(winners_with_metrics$home_win, p = 0.7, list = F, times = 1)
train_data = winners_with_metrics[trainIndex, ]
test_data = winners_with_metrics[-trainIndex, ]
model = glm(home_win ~ ., data = train_data, family = "binomial")
predictions = predict(model, newdata = test_data, type = "response")
binary_predictions = ifelse(predictions > 0.5, 1, 0)
conf_matrix = confusionMatrix(data = as.factor(binary_predictions), reference = as.factor(test_data$home_win))
accuracy = paste0(round(conf_matrix$overall["Accuracy"] * 100, 2), "%")
f1_score = paste0(round(conf_matrix$byClass["F1"] * 100, 2), "%")
sprintf("model accuracy: %s", accuracy)
sprintf("model f1 score: %s", f1_score)
generate_matchup_metrics = function(home, away) {
return(data.frame(home = home, away = away) |>
left_join(cpr_ppg, by = c("home" = "team")) |>
rename(home_off_ppg = off_ppg,
home_def_ppg = def_ppg,
home_off_cpr = off_cpr,
home_def_cpr = def_cpr) |>
left_join(cpr_ppg, by = c("away" = "team")) |>
rename(away_off_ppg = off_ppg,
away_def_ppg = def_ppg,
away_off_cpr = off_cpr,
away_def_cpr = def_cpr))
}
make_game_prediction = function(home, away) {
my_matchup = generate_matchup_metrics(home = home, away = away)
prob = predict(model, my_matchup, type = "response")
if (prob > 0.5) {
win_prob = paste0(round(as.numeric(prob) * 100, 1), "%")
} else {
win_prob = paste0(round(as.numeric(1 - prob) * 100, 1), "%")
}
if (prob > 0.5) {
winner = my_matchup$home[1]
loser = my_matchup$away[1]
} else {
winner = my_matchup$away[1]
loser = my_matchup$home[1]
}
return(sprintf("%s def. %s (%s)", winner, loser, win_prob))
}
make_game_prediction(home = "North Carolina", away = "UConn")
make_game_prediction(home = "UConn", away = "North Carolina")
yesterday_scorigamis = end |>
filter(date == Sys.Date() - 1) |>
mutate(final_score = paste0(win_score, "-", lose_score)) |>
left_join(score_counts, by = c("final_score" = "score")) |>
filter(score_count == 1) |>
mutate(desc = paste0("SCORIGAMI: ", win_team, " def. ", lose_team, " ", final_score),
total_score = win_score + lose_score) |>
arrange(desc(total_score)) |>
pull(desc)
gami_counts = end |>
filter(date == Sys.Date() - 1) |>
mutate(final_score = paste0(win_score, "-", lose_score)) |>
left_join(score_counts, by = c("final_score" = "score")) |>
mutate(gami = ifelse(score_count == 1, 1, 0)) |>
count(gami) |>
pull(n)
gami_pct = paste0(round(gami_counts[2] / sum(gami_counts) * 100, 1), "%")
sprintf("%s of yesterday's games were Scorigamis", gami_pct)
for (gami in yesterday_scorigamis) {
print(gami)
}
today_results = end |>
filter(date == Sys.Date()) |>
mutate(desc = paste0(win_team, " def. ", lose_team, " ", win_score, "-", lose_score),
margin = win_score - lose_score) |>
arrange(margin) |>
pull(desc)
sprintf("%s games today", length(today_results))
print("----------")
for (res in today_results) {
print(res)
}
make_game_prediction(home = "Kentucky", away = "North Carolina")
make_game_prediction(home = "North Carolina", away = "Kentucky")
make_game_prediction(home = "Oklahoma", away = "North Carolina")
make_game_prediction(home = "North Carolina", away = "Oklahoma")
sprintf("Kentucky: %s", (74.1 + 57.4) / 2)
sprintf("Oklahoma: %s", (73.5 + 53.1) / 2)
make_game_prediction(home = "Tennessee", away = "North Carolina")
make_game_prediction(home = "North Carolina", away = "Marshall")
make_game_prediction(home = "North Carolina", away = "NC State")
make_game_prediction(home = "North Carolina", away = "North Carolina State")
make_game_prediction(home = "North Carolina", away = "NC State")
make_game_prediction(home = "North Carolina", away = "Duke")
make_game_prediction(home = "North Carolina", away = "North Carolina")
make_game_prediction(home = "North Carolina", away = "Marshall")
setwd("~/r_projects/cbb_dash")
library(tidyverse)
library(tvthemes)
library(janitor)
library(hoopR)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
tictoc::tic() # starts timer
# data frame with all teams and their team ID
team_ids_names = nba_teams |>
clean_names() |>
select(team_id, team_name)
# function that takes a date and returns all matchups on that date
get_date_matchups = function(date) {
x = nba_scoreboard(league_id = "00", game_date = date, day_offset = 0)$GameHeader
if (nrow(x) == 0) return(NULL)
return(x |>
clean_names() |>
filter(game_status_text == "Final") |>
transmute(game_date = substr(game_date_est, 1, 10),
game_id,
home_team_id, away_team_id = visitor_team_id) |>
inner_join(team_ids_names, by = c("home_team_id" = "team_id")) |>
inner_join(team_ids_names, by = c("away_team_id" = "team_id")) |>
select(game_date, game_id, home_team = team_name.x, away_team = team_name.y))
}
# vector of all dates since beginning of season
loop_dates = as.character(seq.Date(from = as_date("2023-10-24"), to = as_date(Sys.Date() - 1), by = 1))
all_matchups = data.frame() # empty data frame for looping and appending
# loops through every date and adds all matchups from that date to `all_matchups` data frame
for (date in loop_dates) {
all_matchups = rbind(all_matchups, get_date_matchups(date))
}
# vector of all game IDs
all_game_ids = all_matchups$game_id
# function to get game final score from its game ID
get_game_score_from_id = function(gid) {
nba_data_pbp(game_id = gid) |>
filter(de == "End Period") |>
mutate(wallclk = as_datetime(wallclk)) |>
slice_max(wallclk, n = 1, with_ties = F) |>
transmute(game_id = gid, hs, vs)
}
all_results = data.frame() # empty data frame for game results
# looping through all game IDs and adding game results to `all_results`
for (id in all_game_ids) {
all_results = rbind(all_results, get_game_score_from_id(id))
}
# joining together all matchups and final scores into one data frame
end_games = all_matchups |>
inner_join(all_results, by = "game_id") |>
rename(home_score = hs, away_score = vs) |>
mutate(game_date = as_date(game_date),
win_team = ifelse(home_score > away_score, home_team, away_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_team = ifelse(home_score > away_score, away_team, home_team),
lose_score = ifelse(home_score > away_score, away_score, home_score),
desc = paste0(win_team, " def. ", lose_team, " ", win_score, "-", lose_score))
tictoc::toc() # stops timer
all_teams = sort(unique(end_games$home_team))
team_records = data.frame(team = all_teams) |>
left_join(end_games |>
count(team = win_team) |>
rename(wins = n), by = "team") |>
left_join(end_games |>
count(team = lose_team) |>
rename(losses = n), by = "team") |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
record = paste0(wins, "-", losses),
pct = round(wins / (wins + losses), 3))
team_records |>
arrange(desc(pct))
get_team_off_ppg = function(team) {
home = end_games |> filter(home_team == team) |> pull(home_score)
away = end_games |> filter(away_team == team) |> pull(away_score)
return(round(mean(c(home, away)), 3))
}
get_team_def_ppg = function(team) {
home = end_games |> filter(home_team == team) |> pull(away_score)
away = end_games |> filter(away_team == team) |> pull(home_score)
return(round(mean(c(home, away)), 3))
}
get_team_total_pts_scored = function(team) {
home = end_games |> filter(home_team == team) |> pull(home_score)
away = end_games |> filter(away_team == team) |> pull(away_score)
return(sum(c(home, away)))
}
get_team_total_pts_allowed = function(team) {
home = end_games |> filter(home_team == team) |> pull(away_score)
away = end_games |> filter(away_team == team) |> pull(home_score)
return(sum(c(home, away)))
}
data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg),
diff = off_ppg - def_ppg) |>
arrange(desc(diff))
team_ppg = data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg))
end_with_cpr = end_games |>
left_join(team_ppg, by = c("home_team" = "team")) |>
rename(home_off_ppg = off_ppg,
home_def_ppg = def_ppg) |>
left_join(team_ppg, by = c("away_team" = "team")) |>
rename(away_off_ppg = off_ppg,
away_def_ppg = def_ppg) |>
mutate(home_exp = (home_off_ppg + away_def_ppg) / 2,
away_exp = (away_off_ppg + home_def_ppg) / 2,
home_off_cpr = home_score - home_exp,
home_def_cpr = away_exp - away_score,
away_off_cpr = away_score - away_exp,
away_def_cpr = home_exp - home_score)
end_with_cpr
get_team_off_cpr = function(team) {
home = end_with_cpr |> filter(home_team == team) |> pull(home_off_cpr)
away = end_with_cpr |> filter(away_team == team) |> pull(away_off_cpr)
return(round(mean(c(home, away)), 3))
}
get_team_def_cpr = function(team) {
home = end_with_cpr |> filter(home_team == team) |> pull(home_def_cpr)
away = end_with_cpr |> filter(away_team == team) |> pull(away_def_cpr)
return(round(mean(c(home, away)), 3))
}
data.frame(team = all_teams) |>
mutate(off_cpr = sapply(team, get_team_off_cpr),
def_cpr = sapply(team, get_team_def_cpr),
total_cpr = off_cpr + def_cpr) |>
ggplot(aes(off_cpr, def_cpr)) +
geom_point(aes(col = team), shape = "square", size = 3, show.legend = F) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 30) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5)
